import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Label } from '@/components/ui/label';
import { Plus, Clock, CheckCircle, AlertCircle, Trash2, Edit } from 'lucide-react';
import { Task, Patient, User, ActivityLog } from '@/types/medical';

interface TaskManagerProps {
  tasks: Task[];
  patients: Patient[];
  onAddTask: (task: Task) => void;
  onUpdateTask: (task: Task) => void;
  onDeleteTask: (taskId: string) => void;
  onLogActivity: (log: ActivityLog) => void;
  currentUser: User;
}

export default function TaskManager({
  tasks,
  patients,
  onAddTask,
  onUpdateTask,
  onDeleteTask,
  onLogActivity,
  currentUser
}: TaskManagerProps) {
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);
  const [editingTask, setEditingTask] = useState<Task | null>(null);
  const [newTask, setNewTask] = useState({
    title: '',
    description: '',
    patientId: '',
    dueTime: '',
    priority: 'medium' as 'low' | 'medium' | 'high' | 'urgent'
  });

  const handleAddTask = () => {
    if (!newTask.title.trim()) return;

    const selectedPatient = patients.find(p => p.id === newTask.patientId);
    const task: Task = {
      id: Date.now().toString(),
      title: newTask.title,
      description: newTask.description,
      patientId: newTask.patientId || undefined,
      patientName: selectedPatient?.name,
      dueTime: newTask.dueTime ? new Date(newTask.dueTime) : undefined,
      priority: newTask.priority,
      completed: false,
      addedBy: currentUser.fullName,
      addedAt: new Date(),
      autoGenerated: false
    };

    onAddTask(task);
    onLogActivity({
      id: Date.now().toString(),
      type: 'task_completed',
      description: `Task "${task.title}" added`,
      user: currentUser.fullName,
      timestamp: new Date(),
      relatedId: task.id
    });

    setNewTask({
      title: '',
      description: '',
      patientId: '',
      dueTime: '',
      priority: 'medium'
    });
    setIsAddDialogOpen(false);
  };

  const handleComplete = (task: Task) => {
    const updatedTask = {
      ...task,
      completed: true,
      completedBy: currentUser.fullName,
      completedAt: new Date()
    };

    onUpdateTask(updatedTask);
    onLogActivity({
      id: Date.now().toString(),
      type: 'task_completed',
      description: `Task "${task.title}" completed`,
      user: currentUser.fullName,
      timestamp: new Date(),
      relatedId: task.id
    });
  };

  const handleEdit = (task: Task) => {
    setEditingTask(task);
    setNewTask({
      title: task.title,
      description: task.description,
      patientId: task.patientId || '',
      dueTime: task.dueTime ? task.dueTime.toISOString().slice(0, 16) : '',
      priority: task.priority
    });
  };

  const handleUpdateTask = () => {
    if (!editingTask || !newTask.title.trim()) return;

    const selectedPatient = patients.find(p => p.id === newTask.patientId);
    const updatedTask: Task = {
      ...editingTask,
      title: newTask.title,
      description: newTask.description,
      patientId: newTask.patientId || undefined,
      patientName: selectedPatient?.name,
      dueTime: newTask.dueTime ? new Date(newTask.dueTime) : undefined,
      priority: newTask.priority
    };

    onUpdateTask(updatedTask);
    onLogActivity({
      id: Date.now().toString(),
      type: 'task_completed',
      description: `Task "${updatedTask.title}" updated`,
      user: currentUser.fullName,
      timestamp: new Date(),
      relatedId: updatedTask.id
    });

    setEditingTask(null);
    setNewTask({
      title: '',
      description: '',
      patientId: '',
      dueTime: '',
      priority: 'medium'
    });
  };

  const handleDelete = (taskId: string) => {
    const task = tasks.find(t => t.id === taskId);
    onDeleteTask(taskId);
    
    if (task) {
      onLogActivity({
        id: Date.now().toString(),
        type: 'task_completed',
        description: `Task "${task.title}" deleted`,
        user: currentUser.fullName,
        timestamp: new Date(),
        relatedId: taskId
      });
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'urgent': return 'bg-red-100 text-red-800';
      case 'high': return 'bg-orange-100 text-orange-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'low': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusIcon = (task: Task) => {
    if (task.completed) {
      return <CheckCircle className="h-5 w-5 text-green-600" />;
    }
    if (task.dueTime && new Date(task.dueTime) < new Date()) {
      return <AlertCircle className="h-5 w-5 text-red-600" />;
    }
    return <Clock className="h-5 w-5 text-blue-600" />;
  };

  const pendingTasks = tasks.filter(task => !task.completed);
  const completedTasks = tasks.filter(task => task.completed);

  return (
    <>
      <div className="border rounded-lg p-4 space-y-3">
        <div className="flex justify-between items-center">
          <div>
            <h2 className="text-2xl font-bold text-gray-900">Task Management</h2>
            <p className="text-gray-600">
              {pendingTasks.length} pending, {completedTasks.length} completed
            </p>
          </div>
        </div>

        {/* Pending Tasks */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Clock className="h-5 w-5" />
              Pending Tasks ({pendingTasks.length})
            </CardTitle>
          </CardHeader>
          <CardContent>
            {pendingTasks.length === 0 ? (
              <p className="text-gray-500 text-center py-4">No pending tasks</p>
            ) : (
              <div className="space-y-3">
                {pendingTasks.map(task => (
                  <div key={task.id} className="flex items-center justify-between p-3 border rounded-lg">
                    <div className="flex items-center gap-3 flex-1">
                      {getStatusIcon(task)}
                      <div className="flex-1">
                        <div className="flex items-center gap-2">
                          <h4 className="font-medium">{task.title}</h4>
                          <Badge className={getPriorityColor(task.priority)}>
                            {task.priority}
                          </Badge>
                        </div>
                        {task.description && (
                          <p className="text-sm text-gray-600 mt-1">{task.description}</p>
                        )}
                        {task.patientName && (
                          <p className="text-sm text-blue-600">Patient: {task.patientName}</p>
                        )}
                        {task.dueTime && (
                          <p className="text-sm text-gray-500">
                            Due: {new Date(task.dueTime).toLocaleString()}
                          </p>
                        )}
                        <p className="text-xs text-gray-400">
                          Added by {task.addedBy} on {new Date(task.addedAt).toLocaleString()}
                        </p>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => handleEdit(task)}
                      >
                        <Edit className="h-4 w-4" />
                      </Button>
                      <Button
                        size="sm"
                        onClick={() => handleComplete(task)}
                      >
                        <CheckCircle className="h-4 w-4" />
                      </Button>
                      <Button
                        size="sm"
                        variant="destructive"
                        onClick={() => handleDelete(task.id)}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </CardContent>
        </Card>

        {/* Completed Tasks */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <CheckCircle className="h-5 w-5 text-green-600" />
              Completed Tasks ({completedTasks.length})
            </CardTitle>
          </CardHeader>
          <CardContent>
            {completedTasks.length === 0 ? (
              <p className="text-gray-500 text-center py-4">No completed tasks</p>
            ) : (
              <div className="space-y-3">
                {completedTasks.map(task => (
                  <div key={task.id} className="flex items-center justify-between p-3 border rounded-lg bg-green-50">
                    <div className="flex items-center gap-3 flex-1">
                      <CheckCircle className="h-5 w-5 text-green-600" />
                      <div className="flex-1">
                        <div className="flex items-center gap-2">
                          <h4 className="font-medium line-through text-gray-600">{task.title}</h4>
                          <Badge className={getPriorityColor(task.priority)}>
                            {task.priority}
                          </Badge>
                        </div>
                        {task.description && (
                          <p className="text-sm text-gray-500 mt-1">{task.description}</p>
                        )}
                        {task.patientName && (
                          <p className="text-sm text-blue-600">Patient: {task.patientName}</p>
                        )}
                        <p className="text-xs text-gray-400">
                          Completed by {task.completedBy} on {task.completedAt ? new Date(task.completedAt).toLocaleString() : 'Unknown'}
                        </p>
                      </div>
                    </div>
                    <Button
                      size="sm"
                      variant="destructive"
                      onClick={() => handleDelete(task.id)}
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                ))}
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Floating Add Task Button */}
      <Button
        onClick={() => setIsAddDialogOpen(true)}
        className="fixed bottom-20 right-4 h-14 w-14 rounded-full shadow-lg z-30"
        size="icon"
      >
        <Plus className="h-6 w-6" />
      </Button>

      {/* Add Task Dialog */}
      <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>Add New Task</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label htmlFor="title">Task Title</Label>
              <Input
                id="title"
                value={newTask.title}
                onChange={(e) => setNewTask(prev => ({ ...prev, title: e.target.value }))}
                placeholder="Enter task title"
              />
            </div>
            
            <div>
              <Label htmlFor="description">Description</Label>
              <Textarea
                id="description"
                value={newTask.description}
                onChange={(e) => setNewTask(prev => ({ ...prev, description: e.target.value }))}
                placeholder="Task description"
                rows={3}
              />
            </div>
            
            <div>
              <Label htmlFor="patient">Patient (Optional)</Label>
              <Select value={newTask.patientId} onValueChange={(value) => setNewTask(prev => ({ ...prev, patientId: value }))}>
                <SelectTrigger>
                  <SelectValue placeholder="Select patient" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="">No specific patient</SelectItem>
                  {patients.map(patient => (
                    <SelectItem key={patient.id} value={patient.id}>
                      {patient.name} - Room {patient.roomNumber}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div>
              <Label htmlFor="dueTime">Due Time (Optional)</Label>
              <Input
                id="dueTime"
                type="datetime-local"
                value={newTask.dueTime}
                onChange={(e) => setNewTask(prev => ({ ...prev, dueTime: e.target.value }))}
              />
            </div>
            
            <div>
              <Label htmlFor="priority">Priority</Label>
              <Select value={newTask.priority} onValueChange={(value: any) => setNewTask(prev => ({ ...prev, priority: value }))}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="low">Low</SelectItem>
                  <SelectItem value="medium">Medium</SelectItem>
                  <SelectItem value="high">High</SelectItem>
                  <SelectItem value="urgent">Urgent</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="flex gap-2">
              <Button onClick={handleAddTask} className="flex-1">
                Add Task
              </Button>
              <Button variant="outline" onClick={() => setIsAddDialogOpen(false)}>
                Cancel
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Edit Task Dialog */}
      <Dialog open={!!editingTask} onOpenChange={() => setEditingTask(null)}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>Edit Task</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label htmlFor="edit-title">Task Title</Label>
              <Input
                id="edit-title"
                value={newTask.title}
                onChange={(e) => setNewTask(prev => ({ ...prev, title: e.target.value }))}
                placeholder="Enter task title"
              />
            </div>
            
            <div>
              <Label htmlFor="edit-description">Description</Label>
              <Textarea
                id="edit-description"
                value={newTask.description}
                onChange={(e) => setNewTask(prev => ({ ...prev, description: e.target.value }))}
                placeholder="Task description"
                rows={3}
              />
            </div>
            
            <div>
              <Label htmlFor="edit-patient">Patient (Optional)</Label>
              <Select value={newTask.patientId} onValueChange={(value) => setNewTask(prev => ({ ...prev, patientId: value }))}>
                <SelectTrigger>
                  <SelectValue placeholder="Select patient" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="">No specific patient</SelectItem>
                  {patients.map(patient => (
                    <SelectItem key={patient.id} value={patient.id}>
                      {patient.name} - Room {patient.roomNumber}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div>
              <Label htmlFor="edit-dueTime">Due Time (Optional)</Label>
              <Input
                id="edit-dueTime"
                type="datetime-local"
                value={newTask.dueTime}
                onChange={(e) => setNewTask(prev => ({ ...prev, dueTime: e.target.value }))}
              />
            </div>
            
            <div>
              <Label htmlFor="edit-priority">Priority</Label>
              <Select value={newTask.priority} onValueChange={(value: any) => setNewTask(prev => ({ ...prev, priority: value }))}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="low">Low</SelectItem>
                  <SelectItem value="medium">Medium</SelectItem>
                  <SelectItem value="high">High</SelectItem>
                  <SelectItem value="urgent">Urgent</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="flex gap-2">
              <Button onClick={handleUpdateTask} className="flex-1">
                Update Task
              </Button>
              <Button variant="outline" onClick={() => setEditingTask(null)}>
                Cancel
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
}